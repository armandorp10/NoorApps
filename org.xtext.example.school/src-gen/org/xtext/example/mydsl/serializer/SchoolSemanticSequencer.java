/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import noorApps.Atributo;
import noorApps.Detalle;
import noorApps.Entidad;
import noorApps.NoorAppsPackage;
import noorApps.Root;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.services.SchoolGrammarAccess;

@SuppressWarnings("all")
public class SchoolSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SchoolGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == NoorAppsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case NoorAppsPackage.ATRIBUTO:
				sequence_Atributo(context, (Atributo) semanticObject); 
				return; 
			case NoorAppsPackage.DETALLE:
				sequence_Detalle(context, (Detalle) semanticObject); 
				return; 
			case NoorAppsPackage.ENTIDAD:
				sequence_Entidad(context, (Entidad) semanticObject); 
				return; 
			case NoorAppsPackage.ROOT:
				sequence_Root(context, (Root) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Atributo returns Atributo
	 *
	 * Constraint:
	 *     (
	 *         nombre=EString 
	 *         esEditable=EBoolean 
	 *         esRequerido=EBoolean 
	 *         esVisible=EBoolean 
	 *         esTitulo=EBoolean 
	 *         tipo=TipoDato
	 *     )
	 */
	protected void sequence_Atributo(ISerializationContext context, Atributo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, NoorAppsPackage.Literals.ATRIBUTO__NOMBRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NoorAppsPackage.Literals.ATRIBUTO__NOMBRE));
			if (transientValues.isValueTransient(semanticObject, NoorAppsPackage.Literals.ATRIBUTO__ES_EDITABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NoorAppsPackage.Literals.ATRIBUTO__ES_EDITABLE));
			if (transientValues.isValueTransient(semanticObject, NoorAppsPackage.Literals.ATRIBUTO__ES_REQUERIDO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NoorAppsPackage.Literals.ATRIBUTO__ES_REQUERIDO));
			if (transientValues.isValueTransient(semanticObject, NoorAppsPackage.Literals.ATRIBUTO__ES_VISIBLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NoorAppsPackage.Literals.ATRIBUTO__ES_VISIBLE));
			if (transientValues.isValueTransient(semanticObject, NoorAppsPackage.Literals.ATRIBUTO__ES_TITULO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NoorAppsPackage.Literals.ATRIBUTO__ES_TITULO));
			if (transientValues.isValueTransient(semanticObject, NoorAppsPackage.Literals.ATRIBUTO__TIPO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NoorAppsPackage.Literals.ATRIBUTO__TIPO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAtributoAccess().getNombreEStringParserRuleCall_2_0(), semanticObject.getNombre());
		feeder.accept(grammarAccess.getAtributoAccess().getEsEditableEBooleanParserRuleCall_6_0(), semanticObject.isEsEditable());
		feeder.accept(grammarAccess.getAtributoAccess().getEsRequeridoEBooleanParserRuleCall_10_0(), semanticObject.isEsRequerido());
		feeder.accept(grammarAccess.getAtributoAccess().getEsVisibleEBooleanParserRuleCall_14_0(), semanticObject.isEsVisible());
		feeder.accept(grammarAccess.getAtributoAccess().getEsTituloEBooleanParserRuleCall_18_0(), semanticObject.isEsTitulo());
		feeder.accept(grammarAccess.getAtributoAccess().getTipoTipoDatoEnumRuleCall_22_0(), semanticObject.getTipo());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Detalle returns Detalle
	 *
	 * Constraint:
	 *     (name=ID esFuerte=EBoolean entidad=[Entidad|ID])
	 */
	protected void sequence_Detalle(ISerializationContext context, Detalle semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, NoorAppsPackage.Literals.DETALLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NoorAppsPackage.Literals.DETALLE__NAME));
			if (transientValues.isValueTransient(semanticObject, NoorAppsPackage.Literals.DETALLE__ES_FUERTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NoorAppsPackage.Literals.DETALLE__ES_FUERTE));
			if (transientValues.isValueTransient(semanticObject, NoorAppsPackage.Literals.DETALLE__ENTIDAD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NoorAppsPackage.Literals.DETALLE__ENTIDAD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDetalleAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDetalleAccess().getEsFuerteEBooleanParserRuleCall_6_0(), semanticObject.isEsFuerte());
		feeder.accept(grammarAccess.getDetalleAccess().getEntidadEntidadIDTerminalRuleCall_8_0_1(), semanticObject.eGet(NoorAppsPackage.Literals.DETALLE__ENTIDAD, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Entidad returns Entidad
	 *
	 * Constraint:
	 *     (name=ID descripcion=EString atributo+=Atributo+ detalles+=[Detalle|ID]*)
	 */
	protected void sequence_Entidad(ISerializationContext context, Entidad semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Root returns Root
	 *
	 * Constraint:
	 *     (
	 *         nombre=EString 
	 *         navBarColorHex=EString 
	 *         textColor=EString 
	 *         floatingButtonColor=EString 
	 *         entidad+=Entidad+ 
	 *         detalles+=Detalle*
	 *     )
	 */
	protected void sequence_Root(ISerializationContext context, Root semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
